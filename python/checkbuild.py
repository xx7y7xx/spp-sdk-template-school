# coding=utf-8import os,sysfrom xml.dom import *from xml.dom import minidomfrom xml.dom.minidom import parseimport configimport common# --publish=**    命令所需资源的检查import bucfgopenFilePrint = False	# 在检查文件时，是否显示正确的文件全路径########################################################################################## 该文件的入口方法，从这里开始检查def check():	print '---------------------------------'	print common.encodeChinese("检查模板所需资源...(checkbuild.py)")	print ''	flag = False	if checkSourceFile(bucfg.checkFilePathList) and checkSourceDir(bucfg.checkDirPathList) and checkXmlFile(bucfg.xmlFileList) and checkBuildInfo() and checkFolderEmpty(bucfg.unEmptyDir) and checkSandInfo() and checkTxt(bucfg.productDir):    #加上对txt的判断和处理		flag = True	else:		flag = False	print ''	# check360Img(bucfg.panorama360Dir)	print common.encodeChinese("资源检查完毕!")	print ''	return flag#########################################################################################	# 检查小地图图片是否存在   ## : 这个方法没有被调用def checkMinimap():	flag = False	if os.path.isfile(bucfg.posMinimap1):		bucfg.posMinimap = bucfg.posMinimap1		flag = True	elif os.path.isfile(bucfg.posMinimap2):		bucfg.posMinimap = bucfg.posMinimap2		flag = True	else:		flag = False		print common.encodeChinese(config.ERR500)		print common.encodeChinese(" >>>>缺少小地图图片 /src/art/position/uibe_map.png")		print common.encodeChinese(" >>>>你可以参照 /spp_sdk/template/school/src_template/src/art/position/uibe_map.png 的格式")		print ''	return flag########################################################################################## 判断所有需要的资源文件是否存在def checkSourceFile(fileList):	global openFilePrint	flag = True	for filePath in fileList:		if openFilePrint : 			print ">> "+filePath		if not os.path.isfile(filePath):			flag = False			# msg = "%s 文件不存在，--publish 操作失败！"%(filePath)			print common.encodeChinese(config.ERR500)			print (" >>>>"+filePath)			print common.encodeChinese(" >>>>结合上面的地址，你可以参照 /spp_sdk/template/school/src_template/src/product/....... 目录下对应文件的格式")			print ''	return flag#########################################################################################	# 判断所有需要的资源目录是否存在def checkSourceDir(fileList):	global openFilePrint	flag = True	for filePath in fileList:		if openFilePrint : 			print ">> "+filePath		if not os.path.isdir(filePath):			flag = False			print common.encodeChinese(config.ERR501)			print (" >>>>"+filePath)			print common.encodeChinese(" >>>>你可以参照 /spp_sdk/template/school/src_template/src/....... 目录下对应文件的格式")			print ''	return flag########################################################################################## 检查xml文件的编码# 检查xml文件的文件内容是否正确# 这里直接使用 parse 来判断，没有准确的定位错误tmpXmlFile = ""def checkXmlFile(fileList):	global openFilePrint	print ''	print '-------------------------------'	print  common.encodeChinese("检查 xml 文件的内容是否规范....")	print ''	global tmpXmlFile	flag = True	try:	# 如果是utf8编码格式的		for file in fileList:			tmpXmlFile = file			dom = minidom.parse(file)			if openFilePrint : 				print ">> "+file			# del dom	except:		print ''		print common.encodeChinese(" >>>>ERROR : "+tmpXmlFile)		print common.encodeChinese(" >>>>"+config.ERR706)		print common.encodeChinese(" >>>>你可以参照 /spp_sdk/template/school/src_template/src/....... 目录下对应文件的格式")		flag = False	print ''	return flag	########################################################################################## 建筑信息包括中文信息、英文信息、图片文件，需要检查这三个资源是否匹配def checkBuildInfo():	print ''	print '-------------------------------'	print  common.encodeChinese("检查建筑信息是否匹配....")	print ''		buildDom = minidom.parse(bucfg.posBuildXml)		meshList = buildDom.getElementsByTagName("meshobj")	# 美术提供的所有meshobj的名字及对应的产品文件的中文名		for meshobj in meshList:		# 根据 meshobj 的中文名去找对应的建筑介绍及图片		meshName = meshobj.getAttribute("name")		# 获取meshobj的名字		meshCname = meshobj.getAttribute("cname")		# 获取对应的中文名称				# 根据中文名去 src/product/buildInfo/ 下对应的文件		cnFileName = "%s%s.cn.txt"%(bucfg.prdBuildInfo, meshCname)		enFileName = "%s%s.en.txt"%(bucfg.prdBuildInfo, meshCname)		imgExtName = ".jpg"		imgFileName = "%s%s%s"%(bucfg.prdBuildInfo, meshCname, imgExtName)		if not os.path.isfile(imgFileName):			imgFileName = "%s%s%s"%(bucfg.prdBuildInfo, meshCname, ".png")				checkOneBuildInfo(cnFileName, meshCname, "中文介绍")		checkOneBuildInfo(enFileName, meshCname, "英文介绍")		checkOneBuildInfo(imgFileName, meshCname, "图片文件")			return True	def checkOneBuildInfo(fileName, meshCname, type):	global openFilePrint	if os.path.isfile(fileName):		if openFilePrint :			print (">> "+fileName)	else:		print ''		print common.encodeChinese(config.ERR703)		print ''		print '具体错误如下：'.decode('utf8')		print ">> 找不到[ ".decode('utf8') +meshCname+ " ]的".decode('utf8')+ type.decode('utf8')		print fileName		print common.encodeChinese("你必须确保src/product/position/build.xml文件中所描述的建筑名称与/src/product/buildInfo/中所包含的建筑名称一一对应。")		common.pause()		os._exit(0)		#########################################################################################			# 检查某个目录不能为空def checkFolderEmpty(dirList):	print ''	print '-------------------------------'	print  common.encodeChinese("检查某个目录不能为空....")	print ''		flag = False	for dir in dirList:		files = os.listdir(dir)		if len(files) >0:			flag = True		else:			print ''			print 'ERROR : '			print dir			print common.encodeChinese('该文件夹下没有任何数据，请将对应数据放入该文件夹内，再重新构建。')			common.pause()			os._exit(0)				return flag#########################################################################################	# 检查沙盘信息/src/product/position/sand.xml 与 /src/product/sandTable/ 下的信息匹配def checkSandInfo():	flag = True	print ''	print '-------------------------------'	print  common.encodeChinese("检查沙盘信息是否匹配....")	print ''		# 把 sand.xml中所有中文名称取出来	sandDom = minidom.parse(bucfg.posSandXml)	labelList = sandDom.getElementsByTagName("label")		# 把 sandTable 目录下所有的中文名称取出来	cnameList = []	dirList = os.listdir(bucfg.prdSandTable)	for dir in dirList:		dir = dir.decode("gbk")		fileList = os.listdir(bucfg.prdSandTable+dir)		for file in fileList:			cnameList.append(file)	# 把 list[] 转换为字符串来处理	cnameString = "@".join(cnameList)					# 判断信息是否匹配	for label in labelList:		cname = label.getAttribute("id")		cn = cname+".cn.txt"		en = cname+".en.txt"		type = ""		if cnameString.find(cn) < 0:			flag = False			type = "中文介绍"					if cnameString.find(en) < 0:			flag = False			type = "英文介绍"				if flag==False:			print ''			print common.encodeChinese(config.ERR703)			print ''			print '具体错误如下：'.decode('utf8')			print ">> 找不到[ ".decode('utf8') +cname+ " ]的".decode('utf8')+ type.decode('utf8')			print ">> 缺少的文件是：".decode('utf8') + bucfg.prdSandTable.decode('utf8') + cname +".cn.txt"			print common.encodeChinese("你必须确保src/product/position/sand.xml文件中所描述的中文名称与/src/product/sandTable/*@*@*/中所包含的文件名称一一对应。")			common.pause()			os._exit(0)				return flag	################################################################### 检查txt内容是否为空def checkTxt(dir):	print  common.encodeChinese("检查文件夹中的txt内容是否为空:") + dir		flag=False	#遍历目录	for txtDir in os.listdir(dir):		txtPath=os.path.join(dir,txtDir)		if txtDir=="ui":			continue		if os.path.isfile(txtPath):					if txtPath.find(".txt") > 0:							formattingTxt(txtPath)											elif os.path.isdir(txtPath): 			checkTxt(txtPath)				flag=True		return flag		###------------------------------------------------### 检查全景360预览图片def check360Img(dir):	if not os.path.exists(dir):		return	content = common.readFile(bucfg.squPosXml)	 	for path in os.listdir(dir):			filePath=os.path.join(dir,path)				if os.path.isdir(filePath):					if content.find(path) < 0:				print path,common.encodeChinese("在导出的预览坐标xml中找不到....")				os._exit(0)		num = 1				for path in os.listdir(filePath):			if path[-4:]== ".jpg":				if  path != "t"+str(num)+".jpg":					print "----------------------------------------------------"					print path					print num					print ""					print "Error! ",path,common.encodeChinese("检查名称是否符合规范....")					print filePath+"\\"+path					os._exit(0)					num += 1		os._exit(0)	##############################################################将回车符替换重写txt	#检测第一行和第二行是否为空#如果感觉很乱，可以帮忙改下 def 	formattingTxt(dir):		new_content=""		fileListFile = open(dir)	re = fileListFile.readline()            #第一行	r = fileListFile.readlines()      	new_content+=re		import linecache	rr=linecache.getline(dir,2)      #第二行	fileListFile.close()	if dir.find("web360") < 0 :			# 判断第一行		if re=="\n" or re=="":					print "------------------------"			print common.encodeChinese(".txt文件第一行必填，不允许为空！")			print dir			os._exit(0)		# 排除只有一行的txt	if dir.find("title")<0 and \		dir.find("type") < 0 and \		dir.find("panorama") < 0 and \		dir.find("url") < 0 and \		dir.find("en") < 0 and \		dir.find("setupName") < 0 and \		dir.find("video") < 0 and \		dir.find("web360") < 0 and \		dir.find("type.txt") < 0:		#判断第二行		if rr=="\n" or rr=="":			print"------------------------------------------------------"			print dir			print common.encodeChinese(".txt文件从第二行开始为建筑物的名称，不允许为空，若非要为空，可填写： 暂无信息！")			common.pause()			os._exit(0)		#替换"\n"	for a in r:		if  not a=="\n":			new_content += a		else:			print "ERROR"				# 将内容写回去	ff=open(dir,"w")	ff.write(new_content)	ff.close()		