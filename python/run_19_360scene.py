### coding=utf-8### ---------------------------------------------------------------### -----------------------------------------------------------------### 本模块负责3D场景中嵌入360全景预览功能### 模块调用import osimport shutilimport commonimport bucfg### ---------------------### 变量定义buildName=[]### ----------------------------### 入口def process():		print ''	print '-------------------------------'	print common.encodeChinese('>>处理360全景')	print ''	print "-------------------------------------"		# 读取坐标	# -添加sky的meshobj到world.xml	# -引入sky的factory到factorylib.xml	# -引入shader到shaderlib.xml	# -生成box的相关xml	# 编写js  名字和box的名字要一致		### 若启用360全景功能 请打开一下代码 update by houdongqiang	# if  os.path.exists(bucfg.panorama360Dir):				# doXml() ### 对box的xml操作		# doJs()#获取坐标	### -------------------------------------------------------------------------------### 一系列xml操作def doXml():	# 遍历文件夹获取名字	num = 1	materiaXml ="<library>"		for filePath in os.listdir(bucfg.panorama360Dir):		buildName.append((filePath,"Box"+str(num)+""))		path= os.path.join(bucfg.panorama360Dir,filePath)		createbox_mat(num,path)  ### 存储中文名		materiaXml +="\n\t<library>/art/models/Box/box"+str(num)+"/box"+str(num)+"_mat.xml</library>"		num += 1	materiaXml +="\n</library>"	common.writeNewFile(bucfg.boxPath+"\\materiallib.xml",materiaXml)          #编写materiallib.xml### ----------------------------------------------------------------------------------### 编写单个的box的xmldef createbox_mat(num,path) :	boxString = ""	boxString += "<library>"	boxString += "\n\t<textures>"	boxString += '\n\t\t<texture name="Box'+str(num)+'">'	boxString += '\n\t\t\t<type>crystalspace.texture.loader.cubemap</type>'	boxString += '\n\t\t\t<params>'	boxString	+= '\n\t\t\t\t<north>/art/models/Box/box'+str(num)+'/textures/t1.jpg</north>'		boxString	+= '\n\t\t\t\t<south>/art/models/Box/box'+str(num)+'/textures/t2.jpg</south>'						boxString	+= '\n\t\t\t\t<east>/art/models/Box/box'+str(num)+'/textures/t3.jpg</east>'						boxString	+= '\n\t\t\t\t<west>/art/models/Box/box'+str(num)+'/textures/t4.jpg</west>'						boxString+= '\n\t\t\t\t<top>/art/models/Box/box'+str(num)+'/textures/t5.jpg</top>'								boxString	+= '\n\t\t\t\t<bottom>/art/models/Box/box'+str(num)+'/textures/t6.jpg</bottom>'						boxString	+= '\n\t\t\t</params>'							boxString	+= '\n\t\t</texture>'		boxString	+= '\n\t</textures>'			boxString	+= '\n\t<materials>'						boxString	+= '\n\t\t<material name="Box'+str(num)+'">'						boxString	+= '\n\t\t\t<shader type="base">sky_basic_cubemap</shader>'					boxString	+= '\n\t\t\t<shader type="diffuse">sky_basic_cubemap</shader>'					boxString	+= '\n\t\t\t<shadervar type="texture" name="tex sky">Box'+str(num)+'</shadervar>'	boxString	+= '\n\t\t</material>'					boxString	+= '\n\t</materials>'					boxString	+= '\n</library>'		boxpath=os.path.join(bucfg.boxPath,"box"+str(num))	mkDir(boxpath)		### 拷贝图片	texturesDir="%s\\textures"%(boxpath)		if not os.path.exists(texturesDir):		shutil.copytree(path,texturesDir)			common.writeNewFile(boxpath+"\\"+"box"+str(num)+"_mat.xml",boxString)	 ### copy图片### 编写综合盒子的xml### 编写js#--------------------------------------------------------------------------------### 360预览的box引入factorydef addBoxFacLib():	boxString = ""	boxString += "\n  <library>/art/models/world_box.xml</library>"	boxString += "\n"	return boxString### ----------------------------------------------------------------------### box的shaderdef addBoxShaLib():	boxString = ""	boxString += '\t<shader>'	boxString += '\n\t <file>/shader/sky/basic_cubemap.xml</file>'	boxString += '\n\t</shader>'	boxString += '\n'		return boxString### ---------------------------------------------------------------------------------------### # -添加sky的meshobj到world.xmldef addMeshSky():	skyString = ""	skyString += '<meshobj name="sky">'	skyString += '\n\t\t\t<plugin>crystalspace.mesh.loader.genmesh</plugin>'			skyString += '\n\t\t\t<params>'			skyString += '\n\t\t\t\t<factory>sky</factory>'				skyString += '\n\t\t\t\t<material>sky</material>'				skyString += '\n\t\t\t</params>'			skyString += '\n\t\t\t<zuse/>'			skyString += '\n\t\t\t<move>'			skyString += '\n\t\t\t\t<v x="1.979339599609375" y="-100000" z="1.4561538696289062"/>'				skyString += '\n\t\t\t</move>'			skyString += '\n\t\t</meshobj>'			return skyString	### -------------------------------------------------------------------------------------------### 生成一个空节点def getEmptyNode():	jsonString ="\n"	jsonString += "\n\t\t\t{"	jsonString += "\n\t\t\t\t\"name\" : {"	jsonString += "\n\t\t\t\t\t\"chinese\" : \"\","	jsonString += "\n\t\t\t\t\t\"english\" : \"\""	jsonString += "\n\t\t\t\t},"	jsonString += "\n\t\t\t\t\"position_x\" : \"\","	jsonString += "\n\t\t\t\t\"position_y\" : \"\","	jsonString += "\n\t\t\t\t\"position_z\" : \"\","	jsonString += "\n\t\t\t\t\"url\" : \"\""	jsonString += "\n\t\t\t},"		return jsonString	### ---------------------------------------------###  需要先创建目录再创建文件def mkDir(dir):	if not os.path.exists(dir):			os.makedirs(dir)### --------------------------------------------------### 获取需要坐标，写入js文件def doJs():	positionXml="%spoint_position.xml"%(bucfg.positionDir)	positionXmlTtar="%sjson_full_view.js"%(bucfg.dataDir)	jsString = ""	num = 0	jsString += "FULL_VIEW_POSITION = {"		if len(buildName) > 0:		for name in buildName:			jsString += '\n\t"'+str(num)+'":{'			jsString += '\n\t\t"name":{'			jsString += '\n\t\t\t"chinese_name":"'+name[0]+'",'			jsString += getPosition(name,positionXml)			jsString += '\n\t},'			num +=1				jsString = jsString[0:-1]		jsString += "\n}"				### 写入js文件				common.writeNewFile(positionXmlTtar,jsString)	# 获取匹配节点	### ---------------------------------------------------------------------------------------------------------------------------------------------------### 获取xyz坐标def getPosition(name,path):	jsStr=""		### 定义截取的字符	engNameStr="<english_name>"	engNameEnd="</english_name>"		idStr1=	"<id_1>"	idEnd1="</id_1>"	idStr2=	"<id_2>"	idEnd2="</id_2>"	p_xStr="_x>"	p_yStr="_y>"	p_zStr="_z>"	r_yStr="rotation_y>"	p_xEnd="</point_position_x>"	p_yEnd="</point_position_y>"	p_zEnd="</point_position_z>"	r_yEnd="</point_rotation_y>"		content=common.readFile(path)         ### 打开文件	# print content	index=content.find(name[0])  	if index < 0:		print ""		print "Error! ",common.encodeChinese("在导出的xml中没找到:"),name[0]		os._exit(0)	# print index	buildStr = content[index:]	idStr1 = buildStr[0:buildStr.find(idEnd1)]                   ### id_1的节点	idStr2 = buildStr[buildStr.find(idStr2):buildStr.find(idEnd2)] ### id_1的节点	englishNameStr = buildStr[buildStr.find(engNameStr):buildStr.find(engNameEnd)].split(">")[1]  #英文名	# print idStr2	# print buildStr[buildStr.find(engNameStr):buildStr.find(engNameEnd)]	# os._exit(0)	p_x1 = idStr1[idStr1.find(p_xStr)+3:idStr1.find(p_xEnd)]	p_y1 = idStr1[idStr1.find(p_yStr)+3:idStr1.find(p_yEnd)]	p_z1 = idStr1[idStr1.find(p_zStr)+3:idStr1.find(p_zEnd)]	r_y1 = idStr1[idStr1.find(r_yStr)+11:idStr1.find(r_yEnd)]	p_x2 = idStr2[idStr2.find(p_xStr)+3:idStr2.find(p_xEnd)]	p_y2 = idStr2[idStr2.find(p_yStr)+3:idStr2.find(p_yEnd)]	p_z2 = idStr2[idStr2.find(p_zStr)+3:idStr2.find(p_zEnd)]	r_y2 = idStr2[idStr2.find(r_yStr)+11:idStr2.find(r_yEnd)]		jsStr += '\n\t\t\t"english_name":"'+englishNameStr+'"'	jsStr += '\n\t\t},'		jsStr += '\n\t\t"matName" : "'+name[1]+'",'		jsStr += '\n\t\t"position" : {'	jsStr += '\n\t\t\t"position_x":'+p_x1+','	jsStr += '\n\t\t\t"position_y":'+p_y1+','	jsStr += '\n\t\t\t"position_z":'+p_z1		jsStr += '\n\t\t},'		jsStr += '\n\t\t"next_gate" : {'	jsStr += '\n\t\t\t"next_pos_x":'+p_x2+','	jsStr += '\n\t\t\t"next_pos_y":'+p_y2+','	jsStr += '\n\t\t\t"next_pos_z":'+p_z2+','	jsStr += '\n\t\t\t"next_rot_y":'+r_y2	jsStr += '\n\t\t}'		return jsStr